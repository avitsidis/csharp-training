// Code generated by Microsoft (R) AutoRest Code Generator 0.16.0.0
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.

namespace ContosoConsultancy.Rest.Client.ContosoConsultancyRest.Models
{
    using System;
    using System.Linq;
    using System.Collections.Generic;
    using Newtonsoft.Json;
    using Microsoft.Rest;
    using Microsoft.Rest.Serialization;

    public partial class ContosoConsultancyRestModelsConsultantsCreateConsultantModel
    {
        /// <summary>
        /// Initializes a new instance of the
        /// ContosoConsultancyRestModelsConsultantsCreateConsultantModel
        /// class.
        /// </summary>
        public ContosoConsultancyRestModelsConsultantsCreateConsultantModel() { }

        /// <summary>
        /// Initializes a new instance of the
        /// ContosoConsultancyRestModelsConsultantsCreateConsultantModel
        /// class.
        /// </summary>
        public ContosoConsultancyRestModelsConsultantsCreateConsultantModel(string name, string firstName, DateTime birthDate, DateTime hireDate, DateTime? disengagedDate = default(DateTime?))
        {
            Name = name;
            FirstName = firstName;
            BirthDate = birthDate;
            HireDate = hireDate;
            DisengagedDate = disengagedDate;
        }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "Name")]
        public string Name { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "FirstName")]
        public string FirstName { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "BirthDate")]
        public DateTime BirthDate { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "HireDate")]
        public DateTime HireDate { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "DisengagedDate")]
        public DateTime? DisengagedDate { get; set; }

        /// <summary>
        /// Validate the object. Throws ValidationException if validation fails.
        /// </summary>
        public virtual void Validate()
        {
            if (Name == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "Name");
            }
            if (FirstName == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "FirstName");
            }
        }
    }
}
